"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _config=require("./config"),_VerifyError=_interopRequireDefault(require("./errors/VerifyError")),_utils=_interopRequireDefault(require("./helpers/utils"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}var AUTHENTICATOR_CONTEXT_ERROR=_config.AppConfig.AUTHENTICATOR_CONTEXT_ERROR,DEFAULT_POLLING_DELAY=_config.AppConfig.DEFAULT_POLLING_DELAY,DEFAULT_POLLING_ATTEMPTS=_config.AppConfig.DEFAULT_POLLING_ATTEMPTS;function AuthenticatorContext(a){if(!a)throw new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"Oauth parameter is required");this.oauth=a,this.config=this.oauth.getConfig(),"Implicit"===this.config.flowType&&(this.token=this._fetchToken())}AuthenticatorContext.prototype._fetchToken=function(){return this.oauth.fetchToken()},AuthenticatorContext.prototype._isAuthenticated=function(a){return this.oauth.isAuthenticated(a)},AuthenticatorContext.prototype._handleResponse=function(a,b){return this.oauth.handleResponse(a,b)},AuthenticatorContext.prototype.authenticators=function(a){var b=a||this.token;if(!b)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"token is a required parameter"));var c="".concat(this.config.tenantUrl,"/v1.0/authenticators");return this._handleResponse({method:"GET",url:c},b)},AuthenticatorContext.prototype.initiateAuthenticator=function(a,b){if(2>arguments.length&&"Implicit"!==this.config.flowType)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"initiateAuthenticator(dataObj, token), 2 parameters are required "+arguments.length+" were given"));if(!a)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"dataObj cannot be null"));var c={},d="?qrcodeInResponse=",e="".concat(this.config.tenantUrl,"/v1.0/authenticators/initiation");a.hasOwnProperty("qrcodeInResponse")&&!0===a.qrcodeInResponse&&(d="".concat(d,"true"),e="".concat(e).concat(d),c.accept="image/png");var f=b||this.token;return c={method:"POST",url:e,data:{owner:a.owner||null,clientId:this.config.registrationProfileId,accountName:a.accountName||"Default Account"}},this._handleResponse(c,f)},AuthenticatorContext.prototype.createVerification=function(a,b,c){if(3>arguments.length&&"Implicit"!==this.config.flowType)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"createVerification(authenticatorId, formData, token), 3 parameters are required "+arguments.length+" were given"));if(!b)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"formData is a required parameter"));var d=c||this.token,e="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a,"/verifications"),f={transactionData:{message:b.txMessage||" ",originIpAddress:b.originIpAddress||" ",originUserAgent:b.originUserAgent||" ",additionalData:b.txAdditionalData},pushNotification:{title:b.title||" ",send:b.send,message:b.pushMessage||" "},authenticationMethods:[{id:b.methodId,methodType:"signature"}],logic:"OR",expiresIn:b.expires||120};return this._handleResponse({method:"POST",url:e,data:f},d)},AuthenticatorContext.prototype.viewVerifications=function(a,b){if(2>arguments.length&&"Implicit"!==this.config.flowType)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"viewVerifications(authenticatorId, token), 2 parameters are required "+arguments.length+" were given"));var c=b||this.token,d="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a,"/verifications");return this._handleResponse({method:"GET",url:d},c)},AuthenticatorContext.prototype.viewVerification=function(a,b,c){if(3>arguments.length&&"Implicit"!==this.config.flowType)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"viewVerification(authenticatorId, transactionId, token), 3 parameters are required "+arguments.length+" were given"));var d=c||this.token,e="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a,"/verifications/").concat(b);return this._handleResponse({method:"GET",url:e},d)},AuthenticatorContext.prototype.pollVerification=/*#__PURE__*/function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b,c,d,e,f){var g,h,i,j,k;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:g=d,h=f||DEFAULT_POLLING_ATTEMPTS,i=e||DEFAULT_POLLING_DELAY,j=!1;case 4:if(!(0<h)){a.next=22;break}return a.prev=5,a.next=8,this.viewVerification(b,c,d);case 8:if(k=a.sent,k.token&&(j=!0,g=k.token),"PENDING"===k.response.state&&"SENDING"===k.response.state){a.next=12;break}return a.abrupt("return",Promise.resolve({state:k.response.state,token:j?g:null}));case 12:return a.next=14,_utils.default.sleep(i);case 14:a.next=19;break;case 16:return a.prev=16,a.t0=a["catch"](5),a.abrupt("return",Promise.reject(a.t0));case 19:h--,a.next=4;break;case 22:return a.abrupt("return",Promise.reject(new _VerifyError.default("number of polling attempts exceeded")));case 23:case"end":return a.stop();}},a,this,[[5,16]])}));return function(){return a.apply(this,arguments)}}(),AuthenticatorContext.prototype.enabled=function(a,b,c){if(3>arguments.length&&"Implicit"!==this.config.flowType)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"enabled(authenticatorId, enabled, token), 3 parameters are required "+arguments.length+" were given"));var d=c||this.token,e="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a);return this._handleResponse({method:"PATCH",url:e,data:[{path:"/enabled",value:b,op:"replace"}],contentType:"application/json-patch+json"},d)},AuthenticatorContext.prototype.deleteAuthenticator=function(a,b){if(2>arguments.length&&"Implicit"!==this.config.flowType)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"deleteAuthenticator(authenticatorId, token), 2 parameters are required "+arguments.length+" were given"));var c=b||this.token,d="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a);return this._handleResponse({method:"DELETE",url:d,data:!1},c)},AuthenticatorContext.prototype.methodEnabled=function(a,b,c){if(3>arguments.length&&"Implicit"!==this.config.flowType)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"methodEnabled(id, enabled, token), 3 parameters are required "+arguments.length+" were given"));var d=c||this.token,e="".concat(this.config.tenantUrl,"/v1.0/authnmethods/signatures/").concat(a);return this._handleResponse({method:"PATCH",url:e,data:[{path:"/enabled",value:b,op:"replace"}],contentType:"application/json-patch+json"},d)},AuthenticatorContext.prototype.methods=function(a,b){if(2>arguments.length&&"Implicit"!==this.config.flowType)return Promise.reject(new _VerifyError.default(AUTHENTICATOR_CONTEXT_ERROR,"methods(authenticatorId, token), 2 parameters are required "+arguments.length+" were given"));var c=b||this.token,d=encodeURIComponent("attributes/authenticatorId=\"".concat(a,"\"")),e="".concat(this.config.tenantUrl,"/v1.0/authnmethods/signatures?search=").concat(d);return this._handleResponse({method:"GET",url:e},c)};var _default=AuthenticatorContext;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
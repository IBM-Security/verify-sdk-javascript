"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0;var _config=require("./config"),_Errors=require("./errors/Errors"),_utils=_interopRequireDefault(require("./helpers/utils"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}var AUTHENTICATOR_CONTEXT_ERROR=_config.AppConfig.AUTHENTICATOR_CONTEXT_ERROR,DEFAULT_POLLING_DELAY=_config.AppConfig.DEFAULT_POLLING_DELAY,DEFAULT_POLLING_ATTEMPTS=_config.AppConfig.DEFAULT_POLLING_ATTEMPTS,FLOW_TYPE={implicitFlow:"implicit",authorizationCodeFlow:"authorization",deviceFlow:"device",ROPC:"ropc"},AuthenticatorContext=/*#__PURE__*/function(){function a(b){if(_classCallCheck(this,a),!b)throw new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"Oauth parameter is required");this.oauth=b,this.config=this.oauth.getConfig(),this.config.flowType===FLOW_TYPE.implicitFlow&&(this.token=this._fetchToken())}return _createClass(a,[{key:"_fetchToken",value:function _fetchToken(){return this.oauth.fetchToken()}},{key:"_isAuthenticated",value:function _isAuthenticated(a){return this.oauth.isAuthenticated(a)}},{key:"_handleResponse",value:function _handleResponse(a,b){return this.oauth.handleResponse(a,b)}/**
     * The Authenticator object provides properties and methods to view
     * device information and remove methods
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"authenticators",value:function authenticators(a){var b=a||this.token;if(!b)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"token is a required parameter"));var c="".concat(this.config.tenantUrl,"/v1.0/authenticators");return this._handleResponse({method:"GET",url:c},b)}/**
     * @function initiateAuthenticator
     * Initiates a new authenticator that the client can or enter manually using a mobile device.
     * This method returns base64 encoded data representing a QR code.
     * @param {object} dataObj containing a user friendly name for the registration.
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"initiateAuthenticator",value:function initiateAuthenticator(a,b){if(2>arguments.length&&this.config.flowType!==FLOW_TYPE.implicitFlow)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"initiateAuthenticator(dataObj, token), 2 parameters are required "+arguments.length+" were given"));if(!a)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"dataObj cannot be null"));var c={},d="?qrcodeInResponse=",e="".concat(this.config.tenantUrl,"/v1.0/authenticators/initiation");a.hasOwnProperty("qrcodeInResponse")&&!0===a.qrcodeInResponse&&(d="".concat(d,"true"),e="".concat(e).concat(d),c.accept="image/png");var f=b||this.token;return c={method:"POST",url:e,data:{owner:a.owner||null,clientId:this.config.registrationProfileId,accountName:a.accountName||"Default Account"}},this._handleResponse(c,f)}/**
     * @function createVerification function creates a transaction and sends a push notification to the associated authenticator.
     * @param {string} authenticatorId Creates a new verification for the registered authenticator.
     * @param {object} formData  a JSON payload that specifies the verification transaction data
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"createVerification",value:function createVerification(a,b,c){if(3>arguments.length&&this.config.flowType!==FLOW_TYPE.implicitFlow)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"createVerification(authenticatorId, formData, token), 3 parameters are required "+arguments.length+" were given"));if(!b)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"formData is a required parameter"));var d=c||this.token,e="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a,"/verifications"),f={transactionData:{message:b.txMessage||" ",originIpAddress:b.originIpAddress||" ",originUserAgent:b.originUserAgent||" ",additionalData:b.txAdditionalData},pushNotification:{title:b.title||" ",send:b.send,message:b.pushMessage||" "},authenticationMethods:[{id:b.methodId,methodType:"signature"}],logic:"OR",expiresIn:b.expires||120};return this._handleResponse({method:"POST",url:e,data:f},d)}/**
     * @function viewVerifications Retrieve the list of verification transactions.
     * @param {string} authenticatorId The authenticator registration identifier.
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"viewVerifications",value:function viewVerifications(a,b){if(2>arguments.length&&this.config.flowType!==FLOW_TYPE.implicitFlow)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"viewVerifications(authenticatorId, token), 2 parameters are required "+arguments.length+" were given"));var c=b||this.token,d="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a,"/verifications");return this._handleResponse({method:"GET",url:d},c)}/**
     * @function viewVerification Retrieve a specific verification transaction that is associated with an authenticator registration.
     * @param {string} authenticatorId The authenticator registration identifier.
     * @param {string} transactionId The verification transaction identifier.
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"viewVerification",value:function viewVerification(a,b,c){if(3>arguments.length&&this.config.flowType!==FLOW_TYPE.implicitFlow)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"viewVerification(authenticatorId, transactionId, token), 3 parameters are required "+arguments.length+" were given"));var d=c||this.token,e="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a,"/verifications/").concat(b);return this._handleResponse({method:"GET",url:e},d)}/**
     * @function pollVerification recursive function that polls a given transaction id for a state change
     * @param {string} authenticatorId authenticator id
     * @param {object} transactionId transaction id
     * @param {object} tokenObj containing access_token, refresh_token ...
     * @param {object} delay delay between polls
     * @param {object} attempts how many times to poll
     */},{key:"pollVerification",value:function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b,c,d,e,f){var g,h,i,j,k;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:g=d,h=f||DEFAULT_POLLING_ATTEMPTS,i=e||DEFAULT_POLLING_DELAY,j=!1;case 4:if(!(0<h)){a.next=22;break}return a.prev=5,a.next=8,this.viewVerification(b,c,d);case 8:if(k=a.sent,k.token&&(j=!0,g=k.token),"PENDING"===k.response.state&&"SENDING"===k.response.state){a.next=12;break}return a.abrupt("return",Promise.resolve({state:k.response.state,token:j?g:null}));case 12:return a.next=14,_utils.default.sleep(i);case 14:a.next=19;break;case 16:return a.prev=16,a.t0=a["catch"](5),a.abrupt("return",Promise.reject(a.t0));case 19:h--,a.next=4;break;case 22:return a.abrupt("return",Promise.reject(new _Errors.VerifyError("number of polling attempts exceeded")));case 23:case"end":return a.stop();}},a,this,[[5,16]])}));return function pollVerification(){return a.apply(this,arguments)}}()/**
     * @function enabled function to update attributes of a specific authenticator registration for
     * IBM Verify instances or custom mobile authenticators that are built from the IBM Verify SDK.
     * @param {string} authenticatorId Id of authenticated device
     * @param {boolean} enabled boolean to enable/disable enrolled method
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"enabled",value:function enabled(a,b,c){if(3>arguments.length&&this.config.flowType!==FLOW_TYPE.implicitFlow)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"enabled(authenticatorId, enabled, token), 3 parameters are required "+arguments.length+" were given"));var d=c||this.token,e="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a);return this._handleResponse({method:"PATCH",url:e,data:[{path:"/enabled",value:b,op:"replace"}],contentType:"application/json-patch+json"},d)}/**
     * @function deleteAuthenticator function to delete a specific authenticator registration for IBM Verify instances or
     * custom mobile authenticators that are built from the IBM Verify SDK.
     * @param {string} authenticatorId Id of authenticated device to be deleted.
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"deleteAuthenticator",value:function deleteAuthenticator(a,b){if(2>arguments.length&&this.config.flowType!==FLOW_TYPE.implicitFlow)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"deleteAuthenticator(authenticatorId, token), 2 parameters are required "+arguments.length+" were given"));var c=b||this.token,d="".concat(this.config.tenantUrl,"/v1.0/authenticators/").concat(a);return this._handleResponse({method:"DELETE",url:d,data:!1},c)}/**
     * @function methodEnabled Gets or sets the current status of the method.
     * @param {string} id The signature enrollment identifier
     * @param {boolean} enabled Enable / Disable enrolled signature method.
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"methodEnabled",value:function methodEnabled(a,b,c){if(3>arguments.length&&this.config.flowType!==FLOW_TYPE.implicitFlow)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"methodEnabled(id, enabled, token), 3 parameters are required "+arguments.length+" were given"));var d=c||this.token,e="".concat(this.config.tenantUrl,"/v1.0/authnmethods/signatures/").concat(a);return this._handleResponse({method:"PATCH",url:e,data:[{path:"/enabled",value:b,op:"replace"}],contentType:"application/json-patch+json"},d)}/**
     * @function methods Gets an array of method objects containing all the enrolled methods for a given authenticator.
     * @param {string} authenticatorId unique ID of registered authenticator
     * @param {object} tokenObj containing access_token, refresh_token ...
     */},{key:"methods",value:function methods(a,b){if(2>arguments.length&&this.config.flowType!==FLOW_TYPE.implicitFlow)return Promise.reject(new _Errors.VerifyError(AUTHENTICATOR_CONTEXT_ERROR,"methods(authenticatorId, token), 2 parameters are required "+arguments.length+" were given"));var c=b||this.token,d=encodeURIComponent("attributes/authenticatorId=\"".concat(a,"\"")),e="".concat(this.config.tenantUrl,"/v1.0/authnmethods/signatures?search=").concat(d);return this._handleResponse({method:"GET",url:e},c)}}]),a}(),_default=AuthenticatorContext;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
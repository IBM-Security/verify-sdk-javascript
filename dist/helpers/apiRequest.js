"use strict";var _Errors=require("../errors/Errors"),_config=require("../config");function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}var XMLHttpRequest=require("xmlhttprequest").XMLHttpRequest,HTTP_ERROR=_config.AppConfig.HTTP_ERROR,apiRequest=function(a,b){return new Promise(function(c,d){function e(){if(4===g.readyState)if(200<=g.status&&300>g.status){if(204===g.status)return c(g);try{return c(JSON.parse(g.responseText))}catch(a){return c(g.responseText)}}else{if(400<=g.status&&500>g.status){try{f=new _Errors.VerifyError(HTTP_ERROR,JSON.parse(g.responseText),g.status)}catch(a){f=new _Errors.VerifyError(HTTP_ERROR,g.responseText,g.status)}return d(f)}if(500<=g.status){var a=g.statusText||"Internal Server Error";return d("Error: ".concat(g.status," ").concat(a))}}}// function handleError(){
//   if (httpRequest.status === 0 ){
//     return reject(httpRequest.responseText);
//   }
// }
var f,g=new XMLHttpRequest;if(!g)return d(new _Errors.VerifyError(HTTP_ERROR,"Unable to make a valid HttpRequest"));if(g.onreadystatechange=e,g.open(a.method,a.url,!0),a.accept?g.setRequestHeader("Accept","".concat(a.accept,", text/html")):g.setRequestHeader("Accept","application/json"),g.setRequestHeader("Content-Type",a.contentType||"application/json"),b&&null!==b&&g.setRequestHeader("Authorization","Bearer ".concat(b)),g.setRequestHeader("Cache-Control","no-cache"),g.withCredentials=!0,a.data){var h=a.data;("object"===_typeof(h)||"boolean"==typeof h)&&(h=JSON.stringify(h)),g.send(h)}else g.send(null)})};/**
 * @function apiRequest Makes an API request
 * @param {object} request Object containing request type, url paths to make a valid api request
 * @param {string} accessToken Access token string
 * Returns promise resolve json payload || reject error message
 */module.exports=apiRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oZWxwZXJzL2FwaVJlcXVlc3QuanMiXSwibmFtZXMiOlsiWE1MSHR0cFJlcXVlc3QiLCJyZXF1aXJlIiwiSFRUUF9FUlJPUiIsIkFwcENvbmZpZyIsImFwaVJlcXVlc3QiLCJyZXF1ZXN0IiwiYWNjZXNzVG9rZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImhhbmRsZVJlc3BvbnNlIiwiaHR0cFJlcXVlc3QiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiZXJyb3IiLCJlcnIiLCJWZXJpZnlFcnJvciIsInNlcnZlckVycm9yTWVzc2FnZSIsInN0YXR1c1RleHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvcGVuIiwibWV0aG9kIiwidXJsIiwiYWNjZXB0Iiwic2V0UmVxdWVzdEhlYWRlciIsImNvbnRlbnRUeXBlIiwid2l0aENyZWRlbnRpYWxzIiwiZGF0YSIsInN0cmluZ2lmeSIsInNlbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiNlVBRUlBLENBQUFBLGNBQWMsQ0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJELGMsQ0FVM0NFLFVBQVUsQ0FBR0Msa0JBQVVELFUsQ0FDdkJFLFVBQVUsQ0FBRyxTQUFTQyxDQUFULENBQWtCQyxDQUFsQixDQUErQixDQUMvQyxNQUFPLElBQUlDLENBQUFBLE9BQUosQ0FBWSxTQUFDQyxDQUFELENBQVVDLENBQVYsQ0FBcUIsQ0FrQ3ZDLFFBQVNDLENBQUFBLENBQVQsRUFBMEIsQ0FDekIsR0FBK0IsQ0FBM0IsR0FBQUMsQ0FBVyxDQUFDQyxVQUFoQixDQUNDLEdBQTBCLEdBQXRCLEVBQUFELENBQVcsQ0FBQ0UsTUFBWixFQUFrRCxHQUFyQixDQUFBRixDQUFXLENBQUNFLE1BQTdDLENBQTJELENBQzFELEdBQTJCLEdBQXZCLEdBQUFGLENBQVcsQ0FBQ0UsTUFBaEIsQ0FDQyxNQUFPTCxDQUFBQSxDQUFPLENBQUNH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dCB7VmVyaWZ5RXJyb3J9IGZyb20gJy4uL2Vycm9ycy9FcnJvcnMnO1xuaW1wb3J0IHtBcHBDb25maWd9IGZyb20gJy4uL2NvbmZpZyc7XG5sZXQgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKCd4bWxodHRwcmVxdWVzdCcpLlhNTEh0dHBSZXF1ZXN0O1xuXG4vKipcbiAqIEBmdW5jdGlvbiBhcGlSZXF1ZXN0IE1ha2VzIGFuIEFQSSByZXF1ZXN0XG4gKiBAcGFyYW0ge29iamVjdH0gcmVxdWVzdCBPYmplY3QgY29udGFpbmluZyByZXF1ZXN0IHR5cGUsIHVybCBwYXRocyB0byBtYWtlIGEgdmFsaWQgYXBpIHJlcXVlc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBhY2Nlc3NUb2tlbiBBY2Nlc3MgdG9rZW4gc3RyaW5nXG4gKiBSZXR1cm5zIHByb21pc2UgcmVzb2x2ZSBqc29uIHBheWxvYWQgfHwgcmVqZWN0IGVycm9yIG1lc3NhZ2VcbiAqL1xuXG5cbmxldCBIVFRQX0VSUk9SID0gQXBwQ29uZmlnLkhUVFBfRVJST1I7XG5sZXQgYXBpUmVxdWVzdCA9IGZ1bmN0aW9uKHJlcXVlc3QsIGFjY2Vzc1Rva2VuKSB7XG5cdHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdFx0bGV0IGVycjtcblx0XHRsZXQgaHR0cFJlcXVlc3QgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcblx0XHRpZiAoIWh0dHBSZXF1ZXN0KSB7XG5cdFx0XHRyZXR1cm4gcmVqZWN0KG5ldyBWZXJpZnlFcnJvcihIVFRQX0VSUk9SLCAnVW5hYmxlIHRvIG1ha2UgYSB2YWxpZCBIdHRwUmVxdWVzdCcpKTtcblx0XHR9XG5cblx0XHRodHRwUmVxdWVzdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBoYW5kbGVSZXNwb25zZTtcblx0XHQvLyBodHRwUmVxdWVzdC5vbmVycm9yID0gaGFuZGxlRXJyb3I7XG5cdFx0aHR0cFJlcXVlc3Qub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpO1xuXHRcdGlmIChyZXF1ZXN0LmFjY2VwdCkge1xuXHRcdFx0aHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgYCR7cmVxdWVzdC5hY2NlcHR9LCB0ZXh0L2h0bWxgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0aHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQWNjZXB0JywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcblx0XHR9XG5cblx0XHRodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdDb250ZW50LVR5cGUnLCByZXF1ZXN0LmNvbnRlbnRUeXBlIHx8ICdhcHBsaWNhdGlvbi9qc29uJyk7XG5cblx0XHRpZiAoYWNjZXNzVG9rZW4gJiYgYWNjZXNzVG9rZW4gIT09IG51bGwpe1xuXHRcdFx0aHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQXV0aG9yaXphdGlvbicsIGBCZWFyZXIgJHthY2Nlc3NUb2tlbn1gKTtcblx0XHR9XG5cdFx0aHR0cFJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcignQ2FjaGUtQ29udHJvbCcsICduby1jYWNoZScpO1xuXHRcdGh0dHBSZXF1ZXN0LndpdGhDcmVkZW50aWFscyA9IHRydWU7XG5cblx0XHRpZiAocmVxdWVzdC5kYXRhKSB7XG5cdFx0XHRsZXQgZGF0YSA9IHJlcXVlc3QuZGF0YTtcblx0XHRcdGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGRhdGEgPT09ICdib29sZWFuJykge1xuXHRcdFx0XHRkYXRhID0gSlNPTi5zdHJpbmdpZnkoZGF0YSk7XG5cdFx0XHR9XG5cdFx0XHRodHRwUmVxdWVzdC5zZW5kKGRhdGEpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRodHRwUmVxdWVzdC5zZW5kKG51bGwpO1xuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGhhbmRsZVJlc3BvbnNlKCkge1xuXHRcdFx0aWYgKGh0dHBSZXF1ZXN0LnJlYWR5U3RhdGUgPT09IDQpIHtcblx0XHRcdFx0aWYgKGh0dHBSZXF1ZXN0LnN0YXR1cyA+PSAyMDAgJiYgaHR0cFJlcXVlc3Quc3RhdHVzIDwgMzAwKSB7XG5cdFx0XHRcdFx0aWYgKGh0dHBSZXF1ZXN0LnN0YXR1cyA9PT0gMjA0KSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzb2x2ZShodHRwUmVxdWVzdCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzb2x2ZShKU09OLnBhcnNlKGh0dHBSZXF1ZXN0LnJlc3BvbnNlVGV4dCkpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gcmVzb2x2ZShodHRwUmVxdWVzdC5yZXNwb25zZVRleHQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSBlbHNlIGlmIChodHRwUmVxdWVzdC5zdGF0dXMgPj0gNDAwICYmIGh0dHBSZXF1ZXN0LnN0YXR1cyA8IDUwMCkge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRlcnIgPSBuZXcgVmVyaWZ5RXJyb3IoSFRUUF9FUlJPUiwgSlNPTi5wYXJzZShodHRwUmVxdWVzdC5yZXNwb25zZVRleHQpLCBodHRwUmVxdWVzdC5zdGF0dXMpO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0XHRcdFx0XHRlcnIgPSBuZXcgVmVyaWZ5RXJyb3IoSFRUUF9FUlJPUiwgaHR0cFJlcXVlc3QucmVzcG9uc2VUZXh0LCBodHRwUmVxdWVzdC5zdGF0dXMpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRyZXR1cm4gcmVqZWN0KGVycik7XG5cdFx0XHRcdH0gZWxzZSBpZiAoaHR0cFJlcXVlc3Quc3RhdHVzID49IDUwMCApIHtcblx0XHRcdFx0XHRsZXQgc2VydmVyRXJyb3JNZXNzYWdlID0gaHR0cFJlcXVlc3Quc3RhdHVzVGV4dCB8fCAnSW50ZXJuYWwgU2VydmVyIEVycm9yJztcblx0XHRcdFx0XHRyZXR1cm4gcmVqZWN0KGBFcnJvcjogJHtodHRwUmVxdWVzdC5zdGF0dXN9ICR7c2VydmVyRXJyb3JNZXNzYWdlfWApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKXtcblx0XHQvLyAgIGlmIChodHRwUmVxdWVzdC5zdGF0dXMgPT09IDAgKXtcblx0XHQvLyAgICAgcmV0dXJuIHJlamVjdChodHRwUmVxdWVzdC5yZXNwb25zZVRleHQpO1xuXHRcdC8vICAgfVxuXHRcdC8vIH1cblx0fSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwaVJlcXVlc3Q7XG4iXX0=
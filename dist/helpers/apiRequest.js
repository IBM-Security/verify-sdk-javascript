"use strict";var _VerifyError=_interopRequireDefault(require("../errors/VerifyError")),_config=require("../config");function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}var XMLHttpRequest=require("xmlhttprequest").XMLHttpRequest,HTTP_ERROR=_config.AppConfig.HTTP_ERROR,apiRequest=function(a,b){return new Promise(function(c,d){function e(){if(4===g.readyState)if(200<=g.status&&300>g.status){if(204===g.status)return c(g);try{return c(JSON.parse(g.responseText))}catch(a){return c(g.responseText)}}else{if(400<=g.status&&500>g.status){try{f=new _VerifyError.default(HTTP_ERROR,JSON.parse(g.responseText),g.status)}catch(a){f=new _VerifyError.default(HTTP_ERROR,g.responseText,g.status)}return d(f)}// handleError();
return d("Error: ".concat(g.status," ").concat(g.statusText))}}// function handleError(){
//   if (httpRequest.status === 0 ){
//     return reject(httpRequest.responseText);
//   }
// }
var f,g=new XMLHttpRequest;if(!g)return d(new _VerifyError.default(HTTP_ERROR,"Unable to make a valid HttpRequest"));if(g.onreadystatechange=e,g.open(a.method,a.url,!0),a.accept?g.setRequestHeader("Accept","".concat(a.accept,", text/html")):g.setRequestHeader("Accept","application/json"),g.setRequestHeader("Content-Type",a.contentType||"application/json"),b&&null!==b&&g.setRequestHeader("Authorization","Bearer ".concat(b)),g.setRequestHeader("Cache-Control","no-cache"),g.withCredentials=!0,a.data){var h=a.data;("object"===_typeof(h)||"boolean"==typeof h)&&(h=JSON.stringify(h)),g.send(h)}else g.send(null)})};/**
 *
 * @param {object} request object containing request type, url paths to make a valid api request
 *  Returns promise resolve json payload || reject error message
 */module.exports=apiRequest;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oZWxwZXJzL2FwaVJlcXVlc3QuanMiXSwibmFtZXMiOlsiWE1MSHR0cFJlcXVlc3QiLCJyZXF1aXJlIiwiSFRUUF9FUlJPUiIsIkFwcENvbmZpZyIsImFwaVJlcXVlc3QiLCJyZXF1ZXN0IiwiYWNjZXNzVG9rZW4iLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImhhbmRsZVJlc3BvbnNlIiwiaHR0cFJlcXVlc3QiLCJyZWFkeVN0YXRlIiwic3RhdHVzIiwiSlNPTiIsInBhcnNlIiwicmVzcG9uc2VUZXh0IiwiZXJyb3IiLCJlcnIiLCJWZXJpZnlFcnJvciIsInN0YXR1c1RleHQiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJvcGVuIiwibWV0aG9kIiwidXJsIiwiYWNjZXB0Iiwic2V0UmVxdWVzdEhlYWRlciIsImNvbnRlbnRUeXBlIiwid2l0aENyZWRlbnRpYWxzIiwiZGF0YSIsInN0cmluZ2lmeSIsInNlbmQiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoidWJBRUlBLENBQUFBLGNBQWMsQ0FBR0MsT0FBTyxDQUFDLGdCQUFELENBQVAsQ0FBMEJELGMsQ0FTM0NFLFVBQVUsQ0FBR0Msa0JBQVVELFUsQ0FDdkJFLFVBQVUsQ0FBRyxTQUFTQyxDQUFULENBQWtCQyxDQUFsQixDQUErQixDQUM5QyxNQUFPLElBQUlDLENBQUFBLE9BQUosQ0FBWSxTQUFDQyxDQUFELENBQVVDLENBQVYsQ0FBcUIsQ0FrQ3RDLFFBQVNDLENBQUFBLENBQVQsRUFBMEIsQ0FDeEIsR0FBK0IsQ0FBM0IsR0FBQUMsQ0FBVyxDQUFDQyxVQUFoQixDQUNFLEdBQTBCLEdBQXRCLEVBQUFELENBQVcsQ0FBQ0UsTUFBWixFQUFrRCxHQUFyQixDQUFBRixDQUFXLENBQUNFLE1BQTdDLENBQTJELENBQ3pELEdBQTJCLEdBQXZCLEdBQUFGLENBQVcsQ0FBQ0UsTUFBaEIsQ0FDRSxNQUFPTCxDQUFBQSxDQUFPLENBQUNHLENBQUQsQ0FBZCxDQUVGLEdBQUksQ0FDRixNQUFPSCxDQUFBQSxDQUFPLENBQUNNLElBQUksQ0FBQ0MsS0FBTCxDQUFXSixDQUFXLENBQUNLLFlBQXZCLENBQUQsQ0FDZixDQUFDLE1BQU9DLENBQVAsQ0FBYyxDQUNkLE1BQU9ULENBQUFBLENBQU8sQ0FBQ0csQ0FBVyxDQUFDSyxZQUFiLENBQ2YsQ0FDRixDQVRELEtBU08sR0FBMEIsR0FBdEIsRUFBQUwsQ0FBVyxDQUFDRSxNQUFaLEVBQWtELEdBQXJCLENBQUFGLENBQVcsQ0FBQ0UsTUFBN0MsQ0FBMkQsQ0FDOUQsR0FBSSxDQUNGSyxDQUFHLENBQUcsR0FBSUMscUJBQUosQ0FBZ0JqQixVQUFoQixDQUE0QlksSUFBSSxDQUFDQyxLQUFMLENBQVdKLENBQVcsQ0FBQ0ssWUFBdkIsQ0FBNUIsQ0FBa0VMLENBQVcsQ0FBQ0UsTUFBOUUsQ0FDUCxDQUFDLE1BQU9JLENBQVAsQ0FBYyxDQUNkQyxDQUFHLENBQUcsR0FBSUMscUJBQUosQ0FBZ0JqQixVQUFoQixDQUE0QlMsQ0FBVyxDQUFDSyxZQUF4QyxDQUFzREwsQ0FBVyxDQUFDRSxNQUFsRSxDQUNQLENBQ0QsTUFBT0osQ0FBQUEsQ0FBTSxDQUFDUyxDQUFELENBQ2hCLENBQ0M7QUFDQSxNQUFPVCxDQUFBQSxDQUFNLGtCQUFXRSxDQUFXLENBQUNFLE1BQXZCLGFBQWlDRixDQUFXLENBQUNTLFVBQTdDLEVBbEJmLENBcUJILENBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQS9Ec0MsR0FDbENGLENBQUFBLENBRGtDLENBRWxDUCxDQUFXLENBQUcsR0FBSVgsQ0FBQUEsY0FGZ0IsQ0FHdEMsR0FBSSxDQUFDVyxDQUFMLENBQ0UsTUFBT0YsQ0FBQUEsQ0FBTSxDQUFDLEdBQUlVLHFCQUFKLENBQWdCakIsVUFBaEIsQ0FBNEIsb0NBQTVCLENBQUQsQ0FBYixDQW9CRixHQWpCQVMsQ0FBVyxDQUFDVSxrQkFBWixDQUFpQ1gsQ0FpQmpDLENBZkFDLENBQVcsQ0FBQ1csSUFBWixDQUFpQmpCLENBQU8sQ0FBQ2tCLE1BQXpCLENBQWlDbEIsQ0FBTyxDQUFDbUIsR0FBekMsSUFlQSxDQWRJbkIsQ0FBTyxDQUFDb0IsTUFjWixDQWJFZCxDQUFXLENBQUNlLGdCQUFaLENBQTZCLFFBQTdCLFdBQTBDckIsQ0FBTyxDQUFDb0IsTUFBbEQsZ0JBYUYsQ0FYRWQsQ0FBVyxDQUFDZSxnQkFBWixDQUE2QixRQUE3QixDQUF1QyxrQkFBdkMsQ0FXRixDQVJBZixDQUFXLENBQUNlLGdCQUFaLENBQTZCLGNBQTdCLENBQTZDckIsQ0FBTyxDQUFDc0IsV0FBUixFQUF1QixrQkFBcEUsQ0FRQSxDQU5JckIsQ0FBVyxFQUFvQixJQUFoQixHQUFBQSxDQU1uQixFQUxFSyxDQUFXLENBQUNlLGdCQUFaLENBQTZCLGVBQTdCLGtCQUF3RHBCLENBQXhELEVBS0YsQ0FIQUssQ0FBVyxDQUFDZSxnQkFBWixDQUE2QixlQUE3QixDQUE4QyxVQUE5QyxDQUdBLENBRkFmLENBQVcsQ0FBQ2lCLGVBQVosR0FFQSxDQUFJdkIsQ0FBTyxDQUFDd0IsSUFBWixDQUFrQixDQUNoQixHQUFJQSxDQUFBQSxDQUFJLENBQUd4QixDQUFPLENBQUN3QixJQUFuQixDQURnQixDQUVJLFFBQWhCLFdBQU9BLENBQVAsR0FBNEMsU0FBaEIsUUFBT0EsQ0FBQUEsQ0FGdkIsSUFHZEEsQ0FBSSxDQUFHZixJQUFJLENBQUNnQixTQUFMLENBQWVELENBQWYsQ0FITyxFQUtoQmxCLENBQVcsQ0FBQ29CLElBQVosQ0FBaUJGLENBQWpCLENBQ0QsQ0FORCxJQU9FbEIsQ0FBQUEsQ0FBVyxDQUFDb0IsSUFBWixDQUFpQixJQUFqQixDQWlDSCxDQWhFTSxDQWlFUixDLENBMUVEOzs7O0dBNEVBQyxNQUFNLENBQUNDLE9BQVAsQ0FBaUI3QixVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFZlcmlmeUVycm9yIGZyb20gJy4uL2Vycm9ycy9WZXJpZnlFcnJvcic7XG5pbXBvcnQge0FwcENvbmZpZ30gZnJvbSAnLi4vY29uZmlnJztcbmxldCBYTUxIdHRwUmVxdWVzdCA9IHJlcXVpcmUoJ3htbGh0dHByZXF1ZXN0JykuWE1MSHR0cFJlcXVlc3Q7XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSByZXF1ZXN0IG9iamVjdCBjb250YWluaW5nIHJlcXVlc3QgdHlwZSwgdXJsIHBhdGhzIHRvIG1ha2UgYSB2YWxpZCBhcGkgcmVxdWVzdFxuICogIFJldHVybnMgcHJvbWlzZSByZXNvbHZlIGpzb24gcGF5bG9hZCB8fCByZWplY3QgZXJyb3IgbWVzc2FnZVxuICovXG5cblxubGV0IEhUVFBfRVJST1IgPSBBcHBDb25maWcuSFRUUF9FUlJPUjtcbmxldCBhcGlSZXF1ZXN0ID0gZnVuY3Rpb24ocmVxdWVzdCwgYWNjZXNzVG9rZW4pIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBsZXQgZXJyO1xuICAgIGxldCBodHRwUmVxdWVzdCA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgIGlmICghaHR0cFJlcXVlc3QpIHtcbiAgICAgIHJldHVybiByZWplY3QobmV3IFZlcmlmeUVycm9yKEhUVFBfRVJST1IsICdVbmFibGUgdG8gbWFrZSBhIHZhbGlkIEh0dHBSZXF1ZXN0JykpO1xuICAgIH1cblxuICAgIGh0dHBSZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGhhbmRsZVJlc3BvbnNlO1xuICAgIC8vIGh0dHBSZXF1ZXN0Lm9uZXJyb3IgPSBoYW5kbGVFcnJvcjtcbiAgICBodHRwUmVxdWVzdC5vcGVuKHJlcXVlc3QubWV0aG9kLCByZXF1ZXN0LnVybCwgdHJ1ZSk7XG4gICAgaWYgKHJlcXVlc3QuYWNjZXB0KSB7XG4gICAgICBodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCBgJHtyZXF1ZXN0LmFjY2VwdH0sIHRleHQvaHRtbGApO1xuICAgIH0gZWxzZSB7XG4gICAgICBodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdBY2NlcHQnLCAnYXBwbGljYXRpb24vanNvbicpO1xuICAgIH1cblxuICAgIGh0dHBSZXF1ZXN0LnNldFJlcXVlc3RIZWFkZXIoJ0NvbnRlbnQtVHlwZScsIHJlcXVlc3QuY29udGVudFR5cGUgfHwgJ2FwcGxpY2F0aW9uL2pzb24nKTtcblxuICAgIGlmIChhY2Nlc3NUb2tlbiAmJiBhY2Nlc3NUb2tlbiAhPT0gbnVsbCl7XG4gICAgICBodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdBdXRob3JpemF0aW9uJywgYEJlYXJlciAke2FjY2Vzc1Rva2VufWApO1xuICAgIH1cbiAgICBodHRwUmVxdWVzdC5zZXRSZXF1ZXN0SGVhZGVyKCdDYWNoZS1Db250cm9sJywgJ25vLWNhY2hlJyk7XG4gICAgaHR0cFJlcXVlc3Qud2l0aENyZWRlbnRpYWxzID0gdHJ1ZTtcblxuICAgIGlmIChyZXF1ZXN0LmRhdGEpIHtcbiAgICAgIGxldCBkYXRhID0gcmVxdWVzdC5kYXRhO1xuICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgZGF0YSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIGRhdGEgPSBKU09OLnN0cmluZ2lmeShkYXRhKTtcbiAgICAgIH1cbiAgICAgIGh0dHBSZXF1ZXN0LnNlbmQoZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGh0dHBSZXF1ZXN0LnNlbmQobnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaGFuZGxlUmVzcG9uc2UoKSB7XG4gICAgICBpZiAoaHR0cFJlcXVlc3QucmVhZHlTdGF0ZSA9PT0gNCkge1xuICAgICAgICBpZiAoaHR0cFJlcXVlc3Quc3RhdHVzID49IDIwMCAmJiBodHRwUmVxdWVzdC5zdGF0dXMgPCAzMDApIHtcbiAgICAgICAgICBpZiAoaHR0cFJlcXVlc3Quc3RhdHVzID09PSAyMDQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGh0dHBSZXF1ZXN0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKEpTT04ucGFyc2UoaHR0cFJlcXVlc3QucmVzcG9uc2VUZXh0KSk7XG4gICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiByZXNvbHZlKGh0dHBSZXF1ZXN0LnJlc3BvbnNlVGV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKGh0dHBSZXF1ZXN0LnN0YXR1cyA+PSA0MDAgJiYgaHR0cFJlcXVlc3Quc3RhdHVzIDwgNTAwKSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICBlcnIgPSBuZXcgVmVyaWZ5RXJyb3IoSFRUUF9FUlJPUiwgSlNPTi5wYXJzZShodHRwUmVxdWVzdC5yZXNwb25zZVRleHQpLCBodHRwUmVxdWVzdC5zdGF0dXMpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgICAgZXJyID0gbmV3IFZlcmlmeUVycm9yKEhUVFBfRVJST1IsIGh0dHBSZXF1ZXN0LnJlc3BvbnNlVGV4dCwgaHR0cFJlcXVlc3Quc3RhdHVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBoYW5kbGVFcnJvcigpO1xuICAgICAgICAgIHJldHVybiByZWplY3QoYEVycm9yOiAke2h0dHBSZXF1ZXN0LnN0YXR1c30gJHtodHRwUmVxdWVzdC5zdGF0dXNUZXh0fWApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKXtcbiAgICAvLyAgIGlmIChodHRwUmVxdWVzdC5zdGF0dXMgPT09IDAgKXtcbiAgICAvLyAgICAgcmV0dXJuIHJlamVjdChodHRwUmVxdWVzdC5yZXNwb25zZVRleHQpO1xuICAgIC8vICAgfVxuICAgIC8vIH1cbiAgfSk7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGFwaVJlcXVlc3Q7Il19
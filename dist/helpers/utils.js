"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var utils = {
  randomString: function randomString(length) {
    var randomCharset = '0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._~';
    var random = '';

    for (var c = 0, cl = randomCharset.length; c < length; ++c) {
      random += randomCharset[Math.floor(Math.random() * cl)];
    }

    return random;
  },
  dateString: function dateString(value) {
    var dateData = value;
    var dateObject = new Date(Date.parse(dateData));
    var dateReadable = dateObject.toDateString();
    return dateReadable;
  },

  /**
   * return boolean to detect if we're in a node env or browser based.
   */
  isNode: function isNode() {
    var isNode;

    try {
      return isNode = Object.prototype.toString.call(global.process) === '[object process]';
    } catch (e) {
      return isNode = false;
    }
  },

  /**
   * return boolean to detect if the object has an accessToken
   */
  isToken: function isToken(token) {
    if (!token || !token.access_token) {
      return false;
    }

    return true;
  },
  sleep: function sleep(duration) {
    return new Promise(function (resolve) {
      setTimeout(resolve, duration);
    });
  }
};
var _default = utils;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2xpYi9oZWxwZXJzL3V0aWxzLmpzIl0sIm5hbWVzIjpbInV0aWxzIiwicmFuZG9tU3RyaW5nIiwibGVuZ3RoIiwicmFuZG9tQ2hhcnNldCIsInJhbmRvbSIsImMiLCJjbCIsIk1hdGgiLCJmbG9vciIsImRhdGVTdHJpbmciLCJ2YWx1ZSIsImRhdGVEYXRhIiwiZGF0ZU9iamVjdCIsIkRhdGUiLCJwYXJzZSIsImRhdGVSZWFkYWJsZSIsInRvRGF0ZVN0cmluZyIsImlzTm9kZSIsIk9iamVjdCIsInByb3RvdHlwZSIsInRvU3RyaW5nIiwiY2FsbCIsImdsb2JhbCIsInByb2Nlc3MiLCJlIiwiaXNUb2tlbiIsInRva2VuIiwiYWNjZXNzX3Rva2VuIiwic2xlZXAiLCJkdXJhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwic2V0VGltZW91dCJdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsSUFBTUEsS0FBSyxHQUFHO0FBQ1pDLEVBQUFBLFlBQVksRUFBRSxzQkFBU0MsTUFBVCxFQUFpQjtBQUM3QixRQUFJQyxhQUFhLEdBQUcsbUVBQXBCO0FBQ0EsUUFBSUMsTUFBTSxHQUFHLEVBQWI7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUcsQ0FBUixFQUFXQyxFQUFFLEdBQUdILGFBQWEsQ0FBQ0QsTUFBbkMsRUFBMkNHLENBQUMsR0FBR0gsTUFBL0MsRUFBdUQsRUFBRUcsQ0FBekQsRUFBNEQ7QUFDMURELE1BQUFBLE1BQU0sSUFBSUQsYUFBYSxDQUFDSSxJQUFJLENBQUNDLEtBQUwsQ0FBV0QsSUFBSSxDQUFDSCxNQUFMLEtBQWdCRSxFQUEzQixDQUFELENBQXZCO0FBQ0Q7O0FBQ0QsV0FBT0YsTUFBUDtBQUNELEdBUlc7QUFVWkssRUFBQUEsVUFBVSxFQUFFLG9CQUFTQyxLQUFULEVBQWdCO0FBQzFCLFFBQUlDLFFBQVEsR0FBR0QsS0FBZjtBQUNBLFFBQUlFLFVBQVUsR0FBRyxJQUFJQyxJQUFKLENBQVNBLElBQUksQ0FBQ0MsS0FBTCxDQUFXSCxRQUFYLENBQVQsQ0FBakI7QUFDQSxRQUFJSSxZQUFZLEdBQUdILFVBQVUsQ0FBQ0ksWUFBWCxFQUFuQjtBQUVBLFdBQU9ELFlBQVA7QUFDRCxHQWhCVzs7QUFpQlo7OztBQUdBRSxFQUFBQSxNQUFNLEVBQUUsa0JBQVU7QUFDaEIsUUFBSUEsTUFBSjs7QUFDQSxRQUFJO0FBQ0YsYUFBT0EsTUFBTSxHQUFHQyxNQUFNLENBQUNDLFNBQVAsQ0FBaUJDLFFBQWpCLENBQTBCQyxJQUExQixDQUErQkMsTUFBTSxDQUFDQyxPQUF0QyxNQUFtRCxrQkFBbkU7QUFDRCxLQUZELENBRUUsT0FBT0MsQ0FBUCxFQUFVO0FBQ1YsYUFBT1AsTUFBTSxHQUFHLEtBQWhCO0FBQ0Q7QUFDRixHQTNCVzs7QUE0Qlo7OztBQUdBUSxFQUFBQSxPQUFPLEVBQUUsaUJBQVNDLEtBQVQsRUFBZ0I7QUFDdkIsUUFBSSxDQUFDQSxLQUFELElBQVUsQ0FBQ0EsS0FBSyxDQUFDQyxZQUFyQixFQUFrQztBQUNoQyxhQUFPLEtBQVA7QUFDRDs7QUFDRCxXQUFPLElBQVA7QUFDRCxHQXBDVztBQXNDWkMsRUFBQUEsS0FBSyxFQUFFLGVBQVNDLFFBQVQsRUFBbUI7QUFDdEIsV0FBTyxJQUFJQyxPQUFKLENBQVksVUFBQUMsT0FBTyxFQUFJO0FBQzFCQyxNQUFBQSxVQUFVLENBQUNELE9BQUQsRUFBVUYsUUFBVixDQUFWO0FBQ0gsS0FGTSxDQUFQO0FBR0g7QUExQ1csQ0FBZDtlQTZDZTdCLEsiLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCB1dGlscyA9IHtcbiAgcmFuZG9tU3RyaW5nOiBmdW5jdGlvbihsZW5ndGgpIHtcbiAgICB2YXIgcmFuZG9tQ2hhcnNldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVlhZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6LS5ffic7XG4gICAgdmFyIHJhbmRvbSA9ICcnO1xuICAgIGZvciAodmFyIGMgPSAwLCBjbCA9IHJhbmRvbUNoYXJzZXQubGVuZ3RoOyBjIDwgbGVuZ3RoOyArK2MpIHtcbiAgICAgIHJhbmRvbSArPSByYW5kb21DaGFyc2V0W01hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIGNsKV07XG4gICAgfVxuICAgIHJldHVybiByYW5kb207XG4gIH0sXG5cbiAgZGF0ZVN0cmluZzogZnVuY3Rpb24odmFsdWUpIHtcbiAgICBsZXQgZGF0ZURhdGEgPSB2YWx1ZTtcbiAgICBsZXQgZGF0ZU9iamVjdCA9IG5ldyBEYXRlKERhdGUucGFyc2UoZGF0ZURhdGEpKTtcbiAgICBsZXQgZGF0ZVJlYWRhYmxlID0gZGF0ZU9iamVjdC50b0RhdGVTdHJpbmcoKTtcblxuICAgIHJldHVybiBkYXRlUmVhZGFibGU7XG4gIH0sXG4gIC8qKlxuICAgKiByZXR1cm4gYm9vbGVhbiB0byBkZXRlY3QgaWYgd2UncmUgaW4gYSBub2RlIGVudiBvciBicm93c2VyIGJhc2VkLlxuICAgKi9cbiAgaXNOb2RlOiBmdW5jdGlvbigpe1xuICAgIGxldCBpc05vZGU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBpc05vZGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZ2xvYmFsLnByb2Nlc3MpID09PSAnW29iamVjdCBwcm9jZXNzXSc7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIGlzTm9kZSA9IGZhbHNlO1xuICAgIH1cbiAgfSxcbiAgLyoqXG4gICAqIHJldHVybiBib29sZWFuIHRvIGRldGVjdCBpZiB0aGUgb2JqZWN0IGhhcyBhbiBhY2Nlc3NUb2tlblxuICAgKi9cbiAgaXNUb2tlbjogZnVuY3Rpb24odG9rZW4pIHtcbiAgICBpZiAoIXRva2VuIHx8ICF0b2tlbi5hY2Nlc3NfdG9rZW4pe1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcblxuICBzbGVlcDogZnVuY3Rpb24oZHVyYXRpb24pIHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgICBzZXRUaW1lb3V0KHJlc29sdmUsIGR1cmF0aW9uKTtcbiAgICAgIH0pO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB1dGlsczsiXX0=
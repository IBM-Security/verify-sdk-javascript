"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,require("@babel/polyfill");var _queryString=_interopRequireDefault(require("query-string")),_Errors=require("./errors/Errors"),_StorageHandler=_interopRequireDefault(require("./helpers/StorageHandler")),_config=require("./config"),_apiRequest=_interopRequireDefault(require("./helpers/apiRequest")),_utils=_interopRequireDefault(require("./helpers/utils"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _get(a,b,c){return _get="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(a,b,c){var d=_superPropBase(a,b);if(d){var e=Object.getOwnPropertyDescriptor(d,b);return e.get?e.get.call(c):e.value}},_get(a,b,c||a)}function _superPropBase(a,b){for(;!Object.prototype.hasOwnProperty.call(a,b)&&(a=_getPrototypeOf(a),null!==a););return a}function _possibleConstructorReturn(a,b){return b&&("object"===_typeof(b)||"function"==typeof b)?b:_assertThisInitialized(a)}function _assertThisInitialized(a){if(void 0===a)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return a}function _getPrototypeOf(a){return _getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(a){return a.__proto__||Object.getPrototypeOf(a)},_getPrototypeOf(a)}function _inherits(a,b){if("function"!=typeof b&&null!==b)throw new TypeError("Super expression must either be null or a function");a.prototype=Object.create(b&&b.prototype,{constructor:{value:a,writable:!0,configurable:!0}}),b&&_setPrototypeOf(a,b)}function _setPrototypeOf(a,b){return _setPrototypeOf=Object.setPrototypeOf||function(a,b){return a.__proto__=b,a},_setPrototypeOf(a,b)}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}function _defineProperties(a,b){for(var c,d=0;d<b.length;d++)c=b[d],c.enumerable=c.enumerable||!1,c.configurable=!0,"value"in c&&(c.writable=!0),Object.defineProperty(a,c.key,c)}function _createClass(a,b,c){return b&&_defineProperties(a.prototype,b),c&&_defineProperties(a,c),a}function _classCallCheck(a,b){if(!(a instanceof b))throw new TypeError("Cannot call a class as a function")}var FLOW_TYPE={implicitFlow:"implicit",authorizationCodeFlow:"authorization",deviceFlow:"device",ROPC:"ropc"},OAuthContext=function a(b){if(_classCallCheck(this,a),!b)throw new _Errors.InvalidOAuthConfigurationError("Config parameter is required");if(!b.flowType)throw new _Errors.InvalidOAuthConfigurationError("flowType property is required in config settings");if(!b.clientId)throw new _Errors.InvalidOAuthConfigurationError("clientId property is required in config settings");if(!(b.tenantUrl&&_utils.default.isUrl(b.tenantUrl)))throw new _Errors.InvalidOAuthConfigurationError("a valid tenantUrl property is required in config settings");if(!b.scope)throw new _Errors.InvalidOAuthConfigurationError("scope property is required in config settings");// if (!config.responseType) {
// 	throw new InvalidOAuthConfigurationError('responseType property is required in config settings');
// }
switch(b.flowType){case FLOW_TYPE.implicitFlow:return new ImplicitFlow(b);case FLOW_TYPE.authorizationCodeFlow:return new AuthorizationCodeFlow(b);case FLOW_TYPE.deviceFlow:return new DeviceFlow(b);case FLOW_TYPE.ROPC:return new ROPCFlow(b);default:var c=Object.values(FLOW_TYPE).map(function(a){return" \"".concat(a,"\"")});throw new _Errors.InvalidOAuthConfigurationError("\"".concat(b.flowType,"\" flowType not valid. Valid flow types are: ").concat(c));}},FlowAbstract=/*#__PURE__*/function(){function a(b){// cannot instantiate abstract class
if(_classCallCheck(this,a),(this instanceof a?this.constructor:void 0)===a)throw new TypeError("Cannot instantiate FlowAbstract directly");this.config=b}/**
	 * @abstract
	 * @function isValidConfig Validates the config of an OAuthContext instance
	 * @returns {boolean} Boolean indicating whether the config is valid
	 * Abstract parent method throws AbstractMethodNotImplementedError()
	 */return _createClass(a,[{key:"isValidConfig",value:function isValidConfig(){throw new _Errors.AbstractMethodNotImplementedError}/**
	 * @function logout Revokes a user's current access token
	 * @param {string} path Optional path
	 * @param {object} token The token to be revoked containing access_token, refresh_token ...
	 * @returns {Promise<object>} Response object from revoking the token
	 */},{key:"logout",value:function logout(a,b){// path and token supplied
if(2===arguments.length&&!this.isToken(b))return Promise.reject(new _Errors.VerifyError(_config.AppConfig.TOKEN_ERROR,"Token parameter is not a valid token"));// no path but a 'token' provided
if(1===arguments.length&&!this.isToken(a))return Promise.reject(new _Errors.VerifyError(_config.AppConfig.TOKEN_ERROR,"Token parameter is not a valid token"));try{return 2===arguments.length?this.revokeToken(b,"access_token"):this.revokeToken(a,"access_token")}catch(a){return Promise.reject(a)}}/**
	 * @function getConfig Gets the config of the current OAuthContext instance
	 * @returns {object} The config object containing clientId, redirectUri, flowType, ...
	 */},{key:"getConfig",value:function getConfig(){return this.config}/**
	 * @function isAuthenticated Checks whether a token is still valid
	 * @param {object} token The token to be checked for active status containing access_token, refresh_token ...
	 * @returns {Promise<boolean>} Boolean indicating whether the token is active
	 */},{key:"isAuthenticated",value:function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b){var c;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.prev=0,a.next=3,this.introspectToken(b);case 3:return c=a.sent,a.abrupt("return",this.config.flowType===FLOW_TYPE.implicitFlow?!0===c.active:!0===c.response.active);case 7:return a.prev=7,a.t0=a["catch"](0),a.abrupt("return",Promise.reject(a.t0));case 10:case"end":return a.stop();}},a,this,[[0,7]])}));return function isAuthenticated(){return a.apply(this,arguments)}}()/**
	 * @function introspectToken Introspects a token for more information
	 * @param {object} token The token to be inspected containing access_token, refresh_token ...
	 * @returns {Promise<object>} Response object with information about the supplied token
	 */},{key:"introspectToken",value:function introspectToken(a){if(!this.isToken(a))return Promise.reject(new _Errors.VerifyError(_config.AppConfig.TOKEN_ERROR,"Token parameter is not a valid token"));var b="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/introspect"),c={client_id:this.config.clientId,client_secret:this.config.clientSecret,token:a.access_token},d=_queryString.default.stringify(c);return this.handleResponse({method:"POST",url:b,contentType:"application/x-www-form-urlencoded",data:d},a)}/**
	 * @function userInfo Retrieves user information associated with the given token
	 * @param {object} token The associated token to inspect the user information of containing access_token, refresh_token ...
	 * @returns {Promise<object>} Response object with information about the user of the supplied token
	 */},{key:"userInfo",value:function userInfo(a){if(!this.isToken(a))return Promise.reject(new _Errors.VerifyError(_config.AppConfig.TOKEN_ERROR,"Token parameter is not a valid token"));var b="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/userinfo"),c={method:"POST",url:b,contentType:"application/x-www-form-urlencoded",data:_queryString.default.stringify({access_token:a.access_token})};return this.handleResponse(c,a)}/**
	 * @function isToken Validates a token
	 * @param {object} token The token to check containing access_token, refresh_token ...
	 * @returns {boolean} Boolean indicating whether the token is valid
	 */},{key:"isToken",value:function isToken(a){return a&&a.access_token}/**
	 * @function revokeToken Revokes a token
	 * @param {object} token The token to be revoked containing access_token, refresh_token ...
	 * @param {string} tokenType The type of token - 'access_token' or 'refresh_token'
	 * @returns {Promise<object>} Response object from revoking the token
	 */},{key:"revokeToken",value:function revokeToken(a,b){var c="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/revoke");if(2>arguments.length)throw new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_API_ERROR,"revokeToken(token, tokenType), 2 parameters are required "+arguments.length+" were given");if(!a)throw new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_API_ERROR,"token cannot be null");if("access_token"!==b&&"refresh_token"!==b)throw new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_API_ERROR,"Parameter: ".concat(b," is invalid.\n Supported values are \"access_token\" or \"refresh_token"));var d="access_token"===b?a.access_token:a.refresh_token,e={client_id:this.config.clientId,client_secret:this.config.clientSecret,token:d},f=_queryString.default.stringify(e);// token is not required, but handleResponse will throw error without it
return this.handleResponse({method:"POST",contentType:"application/x-www-form-urlencoded",url:c,data:f},a)}/**
	 * @function parseUrlHash Parses a url hash string into an object
	 * @param {string} hash The hash to be parsed
	 * @returns {object} The object representation of the hash string
	 */},{key:"_parseUrlHash",value:function _parseUrlHash(a){return _queryString.default.parse(a)}/**
	 * @function getToken Makes an api request to the Cloud Identity Authorization server
	 * to retrieve access_token, refresh_token, grant_id... used for NodeJS applications that can
	 * store secure credentials
	 * @param {object} params Required data and url path to token EP to retrieve a OAuth 2.0 Bearer Token.
	 * @returns {Promise<object>} Response object containing access token
	 */},{key:"getToken",value:function getToken(a){var b=a.data,c=a.path;if(!(b&&"object"===_typeof(b)&&b.constructor===Object||b&&"string"==typeof b&&b.includes("?")))throw new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_API_ERROR,"getToken(params), Params must contain data object or query string");b.client_id=this.config.clientId,b.client_secret=this.config.clientSecret,b.scope=this.config.scope,b.grant_type=this.config.grantType,this.config.flowType===FLOW_TYPE.authorizationCodeFlow&&(b.redirect_uri=this.config.redirectUri);var d=_queryString.default.stringify(b);return(0,_apiRequest.default)({method:"POST",url:c,contentType:"application/x-www-form-urlencoded",data:d})}/**
	 * @abstract
	 * @function refreshToken Refreshes a token if it has expired
	 * @param {object} token The token object to be refreshed containing access_token, refresh_token ...
	 * @returns {Promise<object|void>} Response object from refreshing the token
	 */},{key:"refreshToken",value:function refreshToken(a){if(!a.hasOwnProperty("refresh_token"))return Promise.reject(new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_API_ERROR,"token has no refresh_token property"));var b="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/token"),c={refresh_token:a.refresh_token,client_id:this.config.clientId,client_secret:this.config.clientSecret,grant_type:"refresh_token",scope:this.config.scope},d=_queryString.default.stringify(c);return(0,_apiRequest.default)({method:"POST",url:b,contentType:"application/x-www-form-urlencoded",data:d})}/**
	 * @function authorize Builds authorization URL using provided config
	 * @param {object} options Config object with clientId, redirectUri, scope and responseType to authorize against
	 * @returns {string} Authorization URL
	 */},{key:"_authorize",value:function _authorize(a){return this._buildUrl(a)}/**
	 * @function buildUrl Constructs authorization URL given provided options
	 * @param {object} options Config object with clientId, redirectUri, scope and responseType
	 * @returns {string} Authorization URL
	 */},{key:"_buildUrl",value:function _buildUrl(a){return a.tenantUrl+"/oidc/endpoint/default/authorize?"+_queryString.default.stringify({client_id:a.clientId,redirect_uri:a.redirectUri,scope:a.scope,response_type:a.responseType,state:_utils.default.randomString(16),nonce:_utils.default.randomString(16)})}/**
	 * @function handleResponse Makes a request and refreshes token if token is expired
	 * @param {object} options Request object containing url path, method, responseType, accept, data to make a valid apiRequest
	 * @param {object} tokenObj Token object containing access_token, refresh_token ... used to make the request
	 * @returns {object} Response object from the request
	 */},{key:"handleResponse",value:function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b,c){var d,e,f,g,h,i=arguments;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(!(2>i.length)){a.next=2;break}return a.abrupt("return",Promise.reject(new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_API_ERROR,"handleResponse(options, token), 2 parameters are required "+i.length+" were given")));case 2:if(this.isToken(c)){a.next=4;break}return a.abrupt("return",Promise.reject(new _Errors.VerifyError(_config.AppConfig.TOKEN_ERROR,"Token parameter is not a valid token")));case 4:return d=c,e={response:null,token:null},a.prev=6,a.next=9,(0,_apiRequest.default)(b,d.access_token);case 9:if(f=a.sent,e.response=f,this.config.flowType!==FLOW_TYPE.implicitFlow){a.next=13;break}return a.abrupt("return",Promise.resolve(f));case 13:return a.abrupt("return",Promise.resolve(e));case 16:if(a.prev=16,a.t0=a["catch"](6),!(401===a.t0.status&&_utils.default.isNode())){a.next=29;break}if(d.refresh_token){a.next=21;break}return a.abrupt("return",Promise.reject(new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_API_ERROR,"access_token expired and refresh_token not found")));case 21:return a.next=23,this.refreshToken(d);case 23:return g=a.sent,a.next=26,(0,_apiRequest.default)(b,g.access_token);case 26:return h=a.sent,e={response:h,token:g},a.abrupt("return",Promise.resolve(e));case 29:return a.abrupt("return",Promise.reject(a.t0));case 30:case"end":return a.stop();}},a,this,[[6,16]])}));return function handleResponse(){return a.apply(this,arguments)}}()}]),a}(),ImplicitFlow=/*#__PURE__*/function(a){function b(a){var c;return _classCallCheck(this,b),c=_possibleConstructorReturn(this,_getPrototypeOf(b).call(this,a)),c.isValidConfig(),c.storageHandler=new _StorageHandler.default(a.storageType),c}/**
	 * @function isValidConfig Validates the config of an ImplicitFlow instance
	 * @returns {boolean} Boolean indicating whether the config is valid
	 * Throws error if no storageType in config or instantiating ImplicitFlow in NodeJS
	 */return _inherits(b,a),_createClass(b,[{key:"isValidConfig",value:function isValidConfig(){if(_utils.default.isNode())throw new _Errors.InvalidOAuthConfigurationError("Implicit flow is not supported in Node");if(!this.config.storageType)throw new _Errors.InvalidOAuthConfigurationError("storageType property is required in config settings for Implicit flow");if(!(this.config.redirectUri&&_utils.default.isUrl(this.config.redirectUri)))throw new _Errors.InvalidOAuthConfigurationError("a valid redirectUri property is required in config settings");return!0}/**
	 * @function refreshToken Refreshes the token if it has expired
	 * @param {object} token The token object containing access_token, refresh_token ...
	 * @returns {Promise<void>} Throws NotAvailableError() as refresh_token is not available in Implicit Flow
	 */},{key:"refreshToken",value:function refreshToken(){throw new _Errors.NotAvailableError}/**
	 * @function fetchToken Retrieves the token object from storage
	 * @returns {object|void} Token object found in storage or throws error
	 */},{key:"fetchToken",value:function fetchToken(){try{return JSON.parse(this.storageHandler.getStorage("token"))}catch(a){return a}}/**
	 * @function setSession Sets the session expiration according to the expiration of the stored token
	 * The token will be cleared from storage once it expires and the session will end.
	 * @returns {void}
	 */},{key:"_setSession",value:function _setSession(){var a=this,b=JSON.parse(this.storageHandler.getStorage("token")).expires_in,c=b-(Date.now()-10);0<c&&setTimeout(function(){a.session=!1,a.storageHandler.clearStorage()},c)}/**
	 * @function login Builds a login URL to authorize against using the instance's config
	 * @returns {string} Authorization URL
	 */},{key:"login",value:function login(){return this._authorize(this.config)}/**
	 * @function logout Redirects user after accessToken has expired.
	 * @params {string} path Optional path to redirect to, defaults to index page.
	 */},{key:"logout",value:function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b){var c;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return c=this.fetchToken(),a.next=3,this.revokeToken(c,"access_token");case 3:return a.next=5,this.storageHandler.clearStorage();case 5:return a.next=7,window.location.replace(b||"/");case 7:case"end":return a.stop();}},a,this)}));return function logout(){return a.apply(this,arguments)}}()/**
	 * @function handleCallback Stores token into sessionStorage
	 * @returns {Promise<void>} Promise rejection if error
	 */},{key:"handleCallback",value:function handleCallback(){var a,b=/#error/,c=window.location.hash;return a="object"===_typeof(c)?c:this._parseUrlHash(c),new Promise(function(d){b.test(c)?d(a):(this.storageHandler.setStorage(a),this._setSession(),window.location.hash="")}.bind(this))}}]),b}(FlowAbstract),AuthorizationCodeFlow=/*#__PURE__*/function(a){function b(a){var c;return _classCallCheck(this,b),c=_possibleConstructorReturn(this,_getPrototypeOf(b).call(this,a)),c.isValidConfig(),c.config.grantType="authorization_code",c}/**
	 * @function isValidConfig Validates the config of an AuthorizationCodeFlow instance
	 * @returns {boolean} Boolean indicating whether the config is valid
	 * Throws error if no clientSecret in config
	 */return _inherits(b,a),_createClass(b,[{key:"isValidConfig",value:function isValidConfig(){if(!this.config.clientSecret)throw new _Errors.InvalidOAuthConfigurationError("clientSecret property is required in config settings for Authorization Code flow");if(!(this.config.redirectUri&&_utils.default.isUrl(this.config.redirectUri)))throw new _Errors.InvalidOAuthConfigurationError("a valid redirectUri property is required in config settings");if(!this.config.responseType)throw new _Errors.InvalidOAuthConfigurationError("responseType property is required in config settings");return!0}},{key:"getToken",value:function getToken(a){if(!a)throw new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"getToken(params), Params are required");if(!(a&&"string"==typeof a&&a.includes("?")))throw new _Errors.VerifyError(_config.AppConfig.OAUTH_CONTEXT_API_ERROR,"getToken(params), Params must contain data object or query string");var b=a.substring(a.indexOf("?")),c="object"===_typeof(b)?b:_queryString.default.parse(b),d="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/token");c.redirect_uri=this.config.redirectUri,c.grant_type=this.config.grantType,c.client_id=this.config.clientId,c.client_secret=this.config.clientSecret,c.scope=this.config.scope;var e=_queryString.default.stringify(c);return(0,_apiRequest.default)({method:"POST",url:d,contentType:"application/x-www-form-urlencoded",data:e})}/**
	 * @function authenticate Returns a URL used to authenticate against using the instance's config
	 * @returns {Promise<string>} Authentication URL
	 */},{key:"authenticate",value:function authenticate(){return new Promise(function(a){a(this._authorize(this.config))}.bind(this))}/**
	 * @function refreshToken Refreshes a token if it has expired
	 * @param {object} token The token object to be refreshed containing access_token, refresh_token ...
	 * @returns {Promise<object|void>} Response object from refreshing the token
	 */},{key:"refreshToken",value:function refreshToken(a){return _get(_getPrototypeOf(b.prototype),"refreshToken",this).call(this,a)}}]),b}(FlowAbstract),DeviceFlow=/*#__PURE__*/function(a){function b(a){var c;return _classCallCheck(this,b),c=_possibleConstructorReturn(this,_getPrototypeOf(b).call(this,a)),c.isValidConfig(),c.POLLING_TIME=5e3,c.config.grantType="urn:ietf:params:oauth:grant-type:device_code",c}/**
	 * @function isValidConfig Validates the config of an DeviceFlow instance
	 * @returns {boolean} Boolean indicating whether the config is valid
	 */return _inherits(b,a),_createClass(b,[{key:"isValidConfig",value:function isValidConfig(){if(!this.config.clientSecret)throw new _Errors.InvalidOAuthConfigurationError("clientSecret property is required in config settings for  Code flow");return!0}/**
	 * @function authorize used to initiate request at /device_authorize EP with
	 * client id (and scope if provided)
	 * @returns The successful response returned includes a device_code, user_code and verification_uri.
	 * Note: device_code should not be exposed to the user agent.
	 */},{key:"authorize",value:function authorize(){var a="".concat(this.config.tenantUrl,"/oidc/endpoint/default/device_authorization"),b={client_id:this.config.clientId,scope:this.config.scope},c=_queryString.default.stringify(b);return(0,_apiRequest.default)({method:"POST",url:a,contentType:"application/x-www-form-urlencoded",data:c})}/**
	 * @function pollTokenApi Polling the token endpoint of the authorization server
	 * @param {deviceCode} string used for polling the token EP
	 * @param {duration} number Optional, used to set the polling time in milliseconds. Default 5000 milliseconds.
	 * @returns {Promise<object>} Resolved or Rejected promise.
	 */},{key:"pollTokenApi",value:function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b){var c,d,e,f,g,h=arguments;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(c=1<h.length&&void 0!==h[1]?h[1]:this.POLLING_TIME,!(c<this.POLLING_TIME)){a.next=3;break}return a.abrupt("return",Promise.reject(new _Errors.DeveloperError("The device made an attempt within [5] seconds. This request will not be processed.")));case 3:if(b){a.next=5;break}return a.abrupt("return",Promise.reject(new _Errors.DeveloperError("No device code value provided.")));case 5:d="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/token"),f={client_id:this.config.clientId,client_secret:this.config.clientSecret,grant_type:this.config.grantType,device_code:b},g={messageId:""};case 8:if("expired_token"===g.messageId||e){a.next=23;break}return a.prev=9,a.next=12,this.getToken({data:f,path:d});case 12:return e=a.sent,a.abrupt("break",23);case 16:a.prev=16,a.t0=a["catch"](9),g=a.t0;case 19:return a.next=21,_utils.default.sleep(c);case 21:a.next=8;break;case 23:if(!e){a.next=25;break}return a.abrupt("return",Promise.resolve());case 25:return a.abrupt("return",Promise.reject(g.messageDescription));case 26:case"end":return a.stop();}},a,this,[[9,16]])}));return function pollTokenApi(){return a.apply(this,arguments)}}()/**
	 * @function refreshToken Refreshes a token if it has expired
	 * @param {object} token The token object to be refreshed containing access_token, refresh_token ...
	 * @returns {Promise<object|void>} Response object from refreshing the token
	 */},{key:"refreshToken",value:function refreshToken(a){return _get(_getPrototypeOf(b.prototype),"refreshToken",this).call(this,a)}}]),b}(FlowAbstract),ROPCFlow=/*#__PURE__*/function(a){function b(a){var c;return _classCallCheck(this,b),c=_possibleConstructorReturn(this,_getPrototypeOf(b).call(this,a)),c.isValidConfig(),c.config.grantType="password",c}/**
	 * @function isValidConfig Validates the config of a DeviceFlow instance
	 * @returns {boolean} Boolean indicating whether the config is valid
	 */return _inherits(b,a),_createClass(b,[{key:"isValidConfig",value:function isValidConfig(){return!0}/**
	 * @function login Retrieves a token using the supplied credentials
	 * @param {string} username The user's identifier
	 * @param {string} password The user's password
	 * @returns {Promise<object>} Response object from login containing token
	 */},{key:"login",value:function login(a,b){if(!a||!b)return Promise.reject(new _Errors.DeveloperError("username and password params are required"));var c="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/token"),d={client_id:this.config.clientId,client_secret:this.config.clientSecret,username:a,password:b,grant_type:this.config.grantType,scope:this.config.scope},e=_queryString.default.stringify(d);return(0,_apiRequest.default)({method:"POST",url:c,contentType:"application/x-www-form-urlencoded",data:e})}/**
	 * @function refreshToken Refreshes a token if it has expired
	 * @param {object} token The token object to be refreshed containing access_token, refresh_token ...
	 * @returns {Promise<object|void>} Response object from refreshing the token
	 */},{key:"refreshToken",value:function refreshToken(a){return _get(_getPrototypeOf(b.prototype),"refreshToken",this).call(this,a)}}]),b}(FlowAbstract),_default=OAuthContext;/**
 * @class OAuthContext
 * Uses Factory pattern to create the appropriate class instance based on the flowType
 */exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
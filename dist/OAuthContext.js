"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.default=void 0,require("@babel/polyfill");var _queryString=_interopRequireDefault(require("query-string")),_VerifyError=_interopRequireDefault(require("./errors/VerifyError")),_StorageHandler=_interopRequireDefault(require("./helpers/StorageHandler")),_config=require("./config"),_apiRequest=_interopRequireDefault(require("./helpers/apiRequest")),_utils=_interopRequireDefault(require("./helpers/utils"));function _interopRequireDefault(a){return a&&a.__esModule?a:{default:a}}function _typeof(a){return _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(a){return typeof a}:function(a){return a&&"function"==typeof Symbol&&a.constructor===Symbol&&a!==Symbol.prototype?"symbol":typeof a},_typeof(a)}function asyncGeneratorStep(a,b,c,d,e,f,g){try{var h=a[f](g),i=h.value}catch(a){return void c(a)}h.done?b(i):Promise.resolve(i).then(d,e)}function _asyncToGenerator(a){return function(){var b=this,c=arguments;return new Promise(function(d,e){function f(a){asyncGeneratorStep(h,d,e,f,g,"next",a)}function g(a){asyncGeneratorStep(h,d,e,f,g,"throw",a)}var h=a.apply(b,c);f(void 0)})}}var OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR=_config.AppConfig.OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,OAUTH_CONTEXT_API_ERROR=_config.AppConfig.OAUTH_CONTEXT_API_ERROR,TOKEN_ERROR=_config.AppConfig.TOKEN_ERROR;/**
 *
 * @param {object} config users configuration settings to kick off
 * OAuth implicit flow
 */function OAuthContext(a){if(!a)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"Config parameter is required");//Verify config settings
if(!a.clientId)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"clientId property is required");if(!a.tenantUrl)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"Tenant URL is required");if(!a.redirectUri&&"client_credentials"!==a.flowType)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"A redirect URL is required");if(!a.responseType&&"client_credentials"!==a.flowType)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"Response Type required");if(!a.scope)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"scope Property not set in Config settings");if("AZN"===a.flowType&&!a.clientSecret)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"Client Secret is required for the AZN code flow");if("Implicit"!==a.flowType&&"AZN"!==a.flowType&&"client_credentials"!==a.flowType)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"Check the flowType property in your configuration object is correct. Supported Values: \"Implicit\", \"AZN\", \"client_credentials\"");if("Implicit"===a.flowType){if(_utils.default.isNode())throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"Implicit flow not supported in Node");if(!a.storageType)throw new _VerifyError.default(OAUTH_CONTEXT_CONFIG_SETTINGS_ERROR,"storageType property not set.");this.storageHandler=new _StorageHandler.default(a.storageType)}this.config=a}/**
 * @function isAuthenticated to check current users access_token or refresh_token to
 * determine if they are still valid.
 * @param {object} token the token object with access_token, refreshToken etc.
 */OAuthContext.prototype.isAuthenticated=/*#__PURE__*/function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b){var c;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:return a.prev=0,a.next=3,this.introspectToken(b);case 3:return c=a.sent,a.abrupt("return",!0===c.response.active);case 7:return a.prev=7,a.t0=a["catch"](0),a.abrupt("return",Promise.reject(a.t0));case 10:case"end":return a.stop();}},a,this,[[0,7]])}));return function(){return a.apply(this,arguments)}}(),OAuthContext.prototype.introspectToken=function(a){var b=a||this.token;if(!_utils.default.isToken(a))return Promise.reject(new _VerifyError.default(TOKEN_ERROR,"Token parameter is not a valid token"));var c="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/introspect"),d={client_id:this.config.clientId,client_secret:this.config.clientSecret,token:b.access_token},e=_queryString.default.stringify(d);return this.handleResponse({method:"POST",url:c,contentType:"application/x-www-form-urlencoded",data:e},b)},OAuthContext.prototype.userinfo=function(a){var b=a||this.token;if(!_utils.default.isToken(b))return Promise.reject(new _VerifyError.default(TOKEN_ERROR,"Token parameter is not a valid token"));var c="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/userinfo"),d={method:"POST",url:c,contentType:"application/x-www-form-urlencoded",data:_queryString.default.stringify(b.access_token)};return this.handleResponse(d,b)},OAuthContext.prototype.fetchToken=function(){if("Implicit"===this.config.flowType)try{var a=JSON.parse(this.storageHandler.getStorage("token"));return a}catch(a){return null}else throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"fetchToken() can only be used with Implicit flow")},OAuthContext.prototype.getConfig=function(){return this.config},OAuthContext.prototype.logout=/*#__PURE__*/function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b,c){var d,e=arguments;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if("Implicit"!==this.config.flowType){a.next=10;break}return d=this.fetchToken(),a.next=4,this.revokeToken(d,"access_token");case 4:return a.next=6,this.storageHandler.clearStorage();case 6:return a.next=8,window.location.replace(b||"/");case 8:a.next=13;break;case 10:2!==e.length||_utils.default.isToken(c)||Promise.reject(new _VerifyError.default(TOKEN_ERROR,"not a valid token.")),1!==e.length||_utils.default.isToken(b)||Promise.reject(new _VerifyError.default(TOKEN_ERROR,"not a valid token.")),2===e.length?this.revokeToken(c,"access_token"):this.revokeToken(b,"access_token");case 13:case"end":return a.stop();}},a,this)}));return function(){return a.apply(this,arguments)}}(),OAuthContext.prototype.revokeToken=function(a,b){var c,d,e,f="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/revoke");if(2>arguments.length)throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"revokeToken(token, tokenType), 2 parameters are required "+arguments.length+" were given");if(!a)throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"token cannot be null");if("access_token"!==b&&"refresh_token"!==b)throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"Parameter: ".concat(b," is invalid.\n Supported values are \"access_token\" or \"refresh_token"));c="access_token"===b?a.access_token:a.refresh_token;var g={client_id:this.config.clientId,client_secret:this.config.clientSecret,token:c};// token is not required, but handleResponse will throw error without it
return d=_queryString.default.stringify(g),e={method:"POST",contentType:"application/x-www-form-urlencoded",url:f,data:d},this.handleResponse(e,a)},OAuthContext.prototype._parseUrlHash=function(a){var b=_queryString.default.parse(a);return b},OAuthContext.prototype._setSession=function(){var a=this;if(_utils.default.isNode())throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"_setSession() is not supported in Node");var b=JSON.parse(this.storageHandler.getStorage("token")).expires_in,c=_config.AppConfig.DEFAULT_CLOCK_SKEW,d=b-(Date.now()-c);0<d&&setTimeout(function(){a.session=!1,a.storageHandler.clearStorage()},d)},OAuthContext.prototype.getToken=function(a){if("Implicit"===this.config.flowType)throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"getToken() cannot be used with Implicit flow");if(!a)// change message
throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"getToken(params), Params are required");var b="client_credentials"===this.config.flowType?a:a.substring(a.indexOf("?"));var c="object"===_typeof(b)?b:_queryString.default.parse(b),d="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/token");"client_credentials"===this.config.flowType?c.grant_type=this.config.flowType:(c.redirect_uri=this.config.redirectUri,c.grant_type="authorization_code"),c.client_id=this.config.clientId,c.client_secret=this.config.clientSecret,c.scope=this.config.scope;var e=_queryString.default.stringify(c);return(0,_apiRequest.default)({method:"POST",url:d,contentType:"application/x-www-form-urlencoded",data:e})},OAuthContext.prototype.refreshToken=function(a){if("Implicit"===this.config.flowType)return Promise.reject(new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"Implicit flow does not support refresh token"));if(!a.hasOwnProperty("refresh_token"))return Promise.reject(new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"refresh_token is a required parameter"));var b="".concat(this.config.tenantUrl,"/v1.0/endpoint/default/token"),c={refresh_token:a.refresh_token,client_id:this.config.clientId,client_secret:this.config.clientSecret,grant_type:"refresh_token",scope:this.config.scope},d=_queryString.default.stringify(c);return(0,_apiRequest.default)({method:"POST",url:b,contentType:"application/x-www-form-urlencoded",data:d})},OAuthContext.prototype._authorize=function(a){return this._buildUrl(a)},OAuthContext.prototype.login=function(){var a=this._authorize(this.config);return a},OAuthContext.prototype._buildUrl=function(a){return a.tenantUrl+"/oidc/endpoint/default/authorize?"+_queryString.default.stringify({client_id:a.clientId,redirect_uri:a.redirectUri,scope:a.scope,response_type:a.responseType,state:_utils.default.randomString(16),nonce:_utils.default.randomString(16)})},OAuthContext.prototype.authenticate=function(){return new Promise(function(a){a(this._authorize(this.config))}.bind(this))},OAuthContext.prototype._parseHash=function(a){var b=_queryString.default.parse(a);return b},OAuthContext.prototype.handleResponse=/*#__PURE__*/function(){var a=_asyncToGenerator(/*#__PURE__*/regeneratorRuntime.mark(function a(b,c){var d,e,f,g,h,i=arguments;return regeneratorRuntime.wrap(function(a){for(;;)switch(a.prev=a.next){case 0:if(!(2>i.length)){a.next=2;break}throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"handleResponse(options, token), 2 parameters are required "+i.length+" were given");case 2:if(_utils.default.isToken(c)){a.next=4;break}return a.abrupt("return",Promise.reject(new _VerifyError.default(TOKEN_ERROR,"not a valid token")));case 4:return d=c,e={response:null,token:null},a.prev=6,a.next=9,(0,_apiRequest.default)(b,d.access_token);case 9:if(f=a.sent,e.response=f,"Implicit"!==this.config.flowType){a.next=13;break}return a.abrupt("return",Promise.resolve(f));case 13:return a.abrupt("return",Promise.resolve(e));case 16:if(a.prev=16,a.t0=a["catch"](6),!(401===a.t0.status&&_utils.default.isNode())){a.next=29;break}if(d.refresh_token){a.next=21;break}return a.abrupt("return",Promise.reject(new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"access_token expired and refresh_token not found")));case 21:return a.next=23,this.refreshToken(d);case 23:return g=a.sent,a.next=26,(0,_apiRequest.default)(b,g.access_token);case 26:return h=a.sent,e={response:h,token:g},a.abrupt("return",Promise.resolve(e));case 29:return a.abrupt("return",Promise.reject(a.t0));case 30:case"end":return a.stop();}},a,this,[[6,16]])}));return function(){return a.apply(this,arguments)}}(),OAuthContext.prototype.handleCallback=function(){if(_utils.default.isNode())throw new _VerifyError.default(OAUTH_CONTEXT_API_ERROR,"handleCallback() is only for Implicit flow");var a,b=/#error/,c=window.location.hash;return a="object"===_typeof(c)?c:this._parseUrlHash(c),new Promise(function(d){b.test(c)?d(a):(this.storageHandler.setStorage(a),this._setSession(),window.location.hash="")}.bind(this))};var _default=OAuthContext;exports.default=_default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,